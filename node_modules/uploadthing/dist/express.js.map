{"version":3,"sources":["../src/express.ts","../package.json","../src/constants.ts","../src/internal/error-formatter.ts","../src/internal/handler.ts","../src/internal/dev-hook.ts","../src/internal/logger.ts","../src/internal/get-full-api-url.ts","../src/internal/parser.ts","../src/internal/types.ts","../src/internal/incompat-node-guard.ts","../src/internal/node-http/getBody.ts","../src/internal/upload-builder.ts"],"sourcesContent":["import { Router as ExpressRouter } from \"express\";\nimport type {\n  Request as ExpressRequest,\n  Response as ExpressResponse,\n} from \"express\";\n\nimport type { Json } from \"@uploadthing/shared\";\nimport { getStatusCodeFromError, UploadThingError } from \"@uploadthing/shared\";\n\nimport { UPLOADTHING_VERSION } from \"./constants\";\nimport { formatError } from \"./internal/error-formatter\";\nimport type { RouterWithConfig } from \"./internal/handler\";\nimport {\n  buildPermissionsInfoHandler,\n  buildRequestHandler,\n} from \"./internal/handler\";\nimport { incompatibleNodeGuard } from \"./internal/incompat-node-guard\";\nimport { initLogger } from \"./internal/logger\";\nimport { getPostBody } from \"./internal/node-http/getBody\";\nimport type { FileRouter } from \"./internal/types\";\nimport type { CreateBuilderOptions } from \"./internal/upload-builder\";\nimport { createBuilder } from \"./internal/upload-builder\";\n\nexport type { FileRouter } from \"./internal/types\";\n\nexport const createUploadthing = <TErrorShape extends Json>(\n  opts?: CreateBuilderOptions<TErrorShape>,\n) =>\n  createBuilder<\n    { req: ExpressRequest; res: ExpressResponse; event: undefined },\n    TErrorShape\n  >(opts);\n\nexport const createUploadthingExpressHandler = <TRouter extends FileRouter>(\n  opts: RouterWithConfig<TRouter>,\n): ExpressRouter => {\n  initLogger(opts.config?.logLevel);\n  incompatibleNodeGuard();\n\n  const requestHandler = buildRequestHandler<TRouter>(opts);\n  const getBuildPerms = buildPermissionsInfoHandler<TRouter>(opts);\n  const router = ExpressRouter();\n\n  // eslint-disable-next-line @typescript-eslint/no-misused-promises\n  router.post(\"/\", async (req, res) => {\n    const bodyResult = await getPostBody({ req });\n\n    if (!bodyResult.ok) {\n      res.status(400);\n      res.setHeader(\"x-uploadthing-version\", UPLOADTHING_VERSION);\n      res.send(\n        JSON.stringify({\n          error: \"BAD_REQUEST\",\n          message: bodyResult.error.message,\n        }),\n      );\n\n      return;\n    }\n\n    const proto = (req.headers[\"x-forwarded-proto\"] as string) ?? \"http\";\n    const url = new URL(\n      req.baseUrl + req.url, // baseUrl is the mount point for the router, url is the path\n      `${proto}://${req.headers.host}`,\n    );\n\n    const response = await requestHandler({\n      req: Object.assign(req, {\n        json: () => Promise.resolve(bodyResult.data),\n      }),\n      url,\n      res,\n    });\n\n    if (response instanceof UploadThingError) {\n      res.status(getStatusCodeFromError(response));\n      res.setHeader(\"x-uploadthing-version\", UPLOADTHING_VERSION);\n      res.send(JSON.stringify(formatError(response, opts.router)));\n      return;\n    }\n\n    if (response.status !== 200) {\n      // We messed up - this should never happen\n      res.status(500);\n      res.setHeader(\"x-uploadthing-version\", UPLOADTHING_VERSION);\n      res.send(\"An unknown error occured\");\n\n      return;\n    }\n\n    res.status(response.status);\n    res.setHeader(\"x-uploadthing-version\", UPLOADTHING_VERSION);\n    res.send(JSON.stringify(response.body));\n  });\n\n  router.get(\"/\", (_req, res) => {\n    res.status(200);\n    res.setHeader(\"x-uploadthing-version\", UPLOADTHING_VERSION);\n\n    res.send(JSON.stringify(getBuildPerms()));\n  });\n\n  return router;\n};\n","{\n  \"name\": \"uploadthing\",\n  \"version\": \"6.2.0\",\n  \"engines\": {\n    \"node\": \">=18.13.0\"\n  },\n  \"license\": \"MIT\",\n  \"exports\": {\n    \"./package.json\": \"./package.json\",\n    \"./client\": {\n      \"types\": \"./dist/client.d.ts\",\n      \"import\": \"./dist/client.mjs\",\n      \"require\": \"./dist/client.js\"\n    },\n    \"./server\": {\n      \"types\": \"./dist/server.d.ts\",\n      \"import\": \"./dist/server.mjs\",\n      \"require\": \"./dist/server.js\"\n    },\n    \"./next\": {\n      \"types\": \"./dist/next.d.ts\",\n      \"import\": \"./dist/next.mjs\",\n      \"require\": \"./dist/next.js\"\n    },\n    \"./next-legacy\": {\n      \"types\": \"./dist/next-legacy.d.ts\",\n      \"import\": \"./dist/next-legacy.mjs\",\n      \"require\": \"./dist/next-legacy.js\"\n    },\n    \"./express\": {\n      \"import\": \"./dist/express.mjs\",\n      \"types\": \"./dist/express.d.ts\",\n      \"require\": \"./dist/express.js\"\n    },\n    \"./tw\": {\n      \"types\": \"./dist/tw.d.ts\",\n      \"import\": \"./dist/tw.mjs\",\n      \"require\": \"./dist/tw.js\"\n    },\n    \"./fastify\": {\n      \"types\": \"./dist/fastify.d.ts\",\n      \"import\": \"./dist/fastify.mjs\",\n      \"require\": \"./dist/fastify.js\"\n    },\n    \"./h3\": {\n      \"types\": \"./dist/h3.d.ts\",\n      \"import\": \"./dist/h3.mjs\",\n      \"require\": \"./dist/h3.js\"\n    }\n  },\n  \"files\": [\n    \"dist\"\n  ],\n  \"publishConfig\": {\n    \"access\": \"public\"\n  },\n  \"typesVersions\": {\n    \"*\": {\n      \"client\": [\n        \"dist/client.d.ts\"\n      ],\n      \"server\": [\n        \"dist/server.d.ts\"\n      ],\n      \"next\": [\n        \"dist/next.d.ts\"\n      ],\n      \"next-legacy\": [\n        \"dist/next-legacy.d.ts\"\n      ],\n      \"tw\": [\n        \"dist/tw.d.ts\"\n      ],\n      \"express\": [\n        \"dist/express.d.ts\"\n      ],\n      \"fastify\": [\n        \"dist/fastify.d.ts\"\n      ],\n      \"h3\": [\n        \"dist/h3.d.ts\"\n      ]\n    }\n  },\n  \"scripts\": {\n    \"lint\": \"eslint \\\"**/*.{ts,tsx}\\\" --max-warnings 0\",\n    \"build\": \"tsup\",\n    \"clean\": \"git clean -xdf dist node_modules\",\n    \"dev\": \"tsup --watch\",\n    \"test\": \"vitest run\",\n    \"test:watch\": \"vitest\",\n    \"typecheck\": \"tsc --noEmit\"\n  },\n  \"dependencies\": {\n    \"@uploadthing/mime-types\": \"^0.2.2\",\n    \"@uploadthing/shared\": \"^6.1.0\",\n    \"consola\": \"^3.2.3\"\n  },\n  \"devDependencies\": {\n    \"@types/express\": \"^4.17.17\",\n    \"@types/react\": \"18.2.33\",\n    \"@uploadthing/eslint-config\": \"0.2.0\",\n    \"@uploadthing/tsconfig\": \"0.1.0\",\n    \"@uploadthing/tsup-config\": \"0.1.0\",\n    \"eslint\": \"^8.47.0\",\n    \"express\": \"^4.18.2\",\n    \"fastify\": \"^4.23.2\",\n    \"h3\": \"^1.8.1\",\n    \"next\": \"14.0.1\",\n    \"solid-js\": \"^1.7.11\",\n    \"tailwindcss\": \"^3.3.2\",\n    \"tsup\": \"6.7.0\",\n    \"type-fest\": \"^3.11.1\",\n    \"typescript\": \"^5.1.6\",\n    \"undici\": \"^5.20.0\",\n    \"vitest\": \"^0.30.1\",\n    \"zod\": \"^3.22.3\"\n  },\n  \"eslintConfig\": {\n    \"root\": true,\n    \"extends\": [\n      \"@uploadthing/eslint-config/base\"\n    ],\n    \"rules\": {\n      \"no-console\": \"error\"\n    }\n  }\n}\n","import packageJson from \"../package.json\";\n\nif (!packageJson.version) throw new Error(\"no version found in package.json\");\nexport const UPLOADTHING_VERSION = packageJson.version;\n","import type { UploadThingError } from \"@uploadthing/shared\";\n\nimport type { FileRouter, inferErrorShape } from \"./types\";\n\nexport function defaultErrorFormatter(error: UploadThingError) {\n  return {\n    message: error.message,\n  };\n}\n\nexport function formatError<TRouter extends FileRouter>(\n  error: UploadThingError,\n  router: TRouter,\n): inferErrorShape<TRouter> {\n  const errorFormatter =\n    router[Object.keys(router)[0]]?._def.errorFormatter ??\n    defaultErrorFormatter;\n\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n  return errorFormatter(error);\n}\n","import type { MimeType } from \"@uploadthing/mime-types/db\";\nimport {\n  generateUploadThingURL,\n  getTypeFromFileName,\n  isObject,\n  objectKeys,\n  fillInputRouteConfig as parseAndExpandInputConfig,\n  safeParseJSON,\n  UploadThingError,\n} from \"@uploadthing/shared\";\nimport type {\n  ContentDisposition,\n  ExpandedRouteConfig,\n  FileRouterInputKey,\n  Json,\n  RequestLike,\n  UploadedFile,\n} from \"@uploadthing/shared\";\n\nimport { UPLOADTHING_VERSION } from \"../constants\";\nimport { conditionalDevServer } from \"./dev-hook\";\nimport { getFullApiUrl } from \"./get-full-api-url\";\nimport type { LogLevel } from \"./logger\";\nimport { logger } from \"./logger\";\nimport { getParseFn } from \"./parser\";\nimport { VALID_ACTION_TYPES } from \"./types\";\nimport type { ActionType, FileRouter, UTEvents } from \"./types\";\n\n/**\n * Creates a wrapped fetch that will always forward a few headers to the server.\n */\nconst createUTFetch = (apiKey: string) => {\n  return async (endpoint: `/${string}`, payload: unknown) => {\n    const response = await fetch(generateUploadThingURL(endpoint), {\n      method: \"POST\",\n      body: JSON.stringify(payload),\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"x-uploadthing-api-key\": apiKey,\n        \"x-uploadthing-version\": UPLOADTHING_VERSION,\n      },\n    });\n\n    return response;\n  };\n};\n\nconst fileCountLimitHit = (\n  files: { name: string }[],\n  routeConfig: ExpandedRouteConfig,\n) => {\n  const counts: Record<string, number> = {};\n\n  files.forEach((file) => {\n    const type = getTypeFromFileName(file.name, objectKeys(routeConfig));\n\n    if (!counts[type]) {\n      counts[type] = 1;\n    } else {\n      counts[type] += 1;\n    }\n  });\n\n  for (const _key in counts) {\n    const key = _key as FileRouterInputKey;\n    const count = counts[key];\n    const limit = routeConfig[key]?.maxFileCount;\n\n    if (!limit) {\n      logger.error(routeConfig, key);\n      throw new UploadThingError({\n        code: \"BAD_REQUEST\",\n        message: \"Invalid config during file count\",\n        cause: `Expected route config to have a maxFileCount for key ${key} but none was found.`,\n      });\n    }\n\n    if (count > limit) {\n      return { limitHit: true, type: key, limit, count };\n    }\n  }\n\n  return { limitHit: false };\n};\n\nexport type RouterWithConfig<TRouter extends FileRouter> = {\n  router: TRouter;\n  config?: {\n    logLevel?: LogLevel;\n    callbackUrl?: string;\n    uploadthingId?: string;\n    uploadthingSecret?: string;\n  };\n};\n\nconst getHeader = (req: RequestLike, key: string) => {\n  if (req.headers instanceof Headers) {\n    return req.headers.get(key);\n  }\n  return req.headers[key];\n};\n\nexport type UploadThingResponse = {\n  presignedUrls: string[];\n  pollingJwt: string;\n  key: string;\n  pollingUrl: string;\n  uploadId: string;\n  fileName: string;\n  fileType: MimeType;\n  contentDisposition: ContentDisposition;\n  chunkCount: number;\n  chunkSize: number;\n}[];\n\nexport const buildRequestHandler = <TRouter extends FileRouter>(\n  opts: RouterWithConfig<TRouter>,\n) => {\n  return async (input: {\n    req: RequestLike;\n    // Allow for overriding request URL since some req.url are read-only\n    // If the adapter doesn't give a full url on `req.url`, this should be set\n    url?: URL;\n    res?: unknown;\n    event?: unknown;\n  }): Promise<\n    UploadThingError | { status: 200; body?: UploadThingResponse }\n  > => {\n    if (process.env.NODE_ENV === \"development\") {\n      logger.info(\"UploadThing dev server is now running!\");\n    }\n\n    const { req, res, event } = input;\n    const { router, config } = opts;\n    const preferredOrEnvSecret =\n      config?.uploadthingSecret ?? process.env.UPLOADTHING_SECRET;\n\n    let url: URL;\n    try {\n      url = new URL(input.url ?? req.url ?? \"\");\n    } catch (error) {\n      return new UploadThingError({\n        code: \"BAD_REQUEST\",\n        message: `Invalid url '${input.url?.href ?? req.url}'`,\n        cause: error,\n      });\n    }\n\n    // Get inputs from query and params\n    const params = url.searchParams;\n    const uploadthingHook = getHeader(req, \"uploadthing-hook\") ?? undefined;\n    const slug = params.get(\"slug\") ?? undefined;\n    const actionType = (params.get(\"actionType\") as ActionType) ?? undefined;\n\n    // Validate inputs\n    if (!slug) {\n      logger.error(\"No slug provided in params:\", params);\n      return new UploadThingError({\n        code: \"BAD_REQUEST\",\n        message: \"No slug provided in params\",\n      });\n    }\n\n    if (slug && typeof slug !== \"string\") {\n      const msg = `Expected slug to be of type 'string', got '${typeof slug}'`;\n      logger.error(msg);\n      return new UploadThingError({\n        code: \"BAD_REQUEST\",\n        message: \"`slug` must be a string\",\n        cause: msg,\n      });\n    }\n    if (actionType && typeof actionType !== \"string\") {\n      const msg = `Expected actionType to be of type 'string', got '${typeof actionType}'`;\n      logger.error(msg);\n      return new UploadThingError({\n        code: \"BAD_REQUEST\",\n        message: \"`actionType` must be a string\",\n        cause: msg,\n      });\n    }\n    if (uploadthingHook && typeof uploadthingHook !== \"string\") {\n      const msg = `Expected uploadthingHook to be of type 'string', got '${typeof uploadthingHook}'`;\n      return new UploadThingError({\n        code: \"BAD_REQUEST\",\n        message: \"`uploadthingHook` must be a string\",\n        cause: msg,\n      });\n    }\n\n    if (!preferredOrEnvSecret) {\n      const msg = `No secret provided, please set UPLOADTHING_SECRET in your env file or in the config`;\n      logger.error(msg);\n      return new UploadThingError({\n        code: \"MISSING_ENV\",\n        message: `No secret provided`,\n        cause: msg,\n      });\n    }\n\n    if (!preferredOrEnvSecret.startsWith(\"sk_\")) {\n      const msg = `Invalid secret provided, UPLOADTHING_SECRET must start with 'sk_'`;\n      logger.error(msg);\n      return new UploadThingError({\n        code: \"MISSING_ENV\",\n        message: \"Invalid API key. API keys must start with 'sk_'.\",\n        cause: msg,\n      });\n    }\n\n    const uploadable = router[slug];\n    if (!uploadable) {\n      const msg = `No file route found for slug ${slug}`;\n      logger.error(msg);\n      return new UploadThingError({\n        code: \"NOT_FOUND\",\n        message: msg,\n      });\n    }\n\n    logger.debug(\"All request input is valid\", { slug, actionType });\n\n    const utFetch = createUTFetch(preferredOrEnvSecret);\n\n    if (uploadthingHook === \"callback\") {\n      // This is when we receive the webhook from uploadthing\n      const maybeReqBody = await safeParseJSON<{\n        file: UploadedFile;\n        files: unknown;\n        metadata: Record<string, unknown>;\n        input?: Json;\n      }>(req);\n\n      logger.debug(\"Handling callback request with input:\", maybeReqBody);\n\n      if (maybeReqBody instanceof Error) {\n        logger.error(\"Invalid request body\", maybeReqBody);\n        return new UploadThingError({\n          code: \"BAD_REQUEST\",\n          message: \"Invalid request body\",\n          cause: maybeReqBody,\n        });\n      }\n\n      const resolverArgs = {\n        file: maybeReqBody.file,\n        metadata: maybeReqBody.metadata,\n      };\n      logger.debug(\n        \"Running 'onUploadComplete' callback with input:\",\n        resolverArgs,\n      );\n      const res = (await uploadable.resolver(resolverArgs)) as unknown;\n      const payload = {\n        fileKey: maybeReqBody.file.key,\n        callbackData: res ?? null,\n      };\n      logger.debug(\n        \"'onUploadComplete' callback finished. Sending response to UploadThing:\",\n        payload,\n      );\n      const callbackResponse = await utFetch(\"/api/serverCallback\", payload);\n      logger.debug(\n        \"UploadThing responded with status:\",\n        callbackResponse.status,\n      );\n      return { status: 200 };\n    }\n\n    if (!actionType || !VALID_ACTION_TYPES.includes(actionType)) {\n      // This would either be someone spamming or the AWS webhook\n      const msg = `Expected ${VALID_ACTION_TYPES.map((x) => `\"${x}\"`)\n        .join(\", \")\n        .replace(/,(?!.*,)/, \" or\")} but got \"${actionType}\"`;\n      logger.error(\"Invalid action type.\", msg);\n      return new UploadThingError({\n        code: \"BAD_REQUEST\",\n        cause: `Invalid action type ${actionType}`,\n        message: msg,\n      });\n    }\n\n    switch (actionType) {\n      case \"upload\": {\n        const maybeInput = await safeParseJSON<UTEvents[\"upload\"]>(req);\n\n        if (maybeInput instanceof Error) {\n          logger.error(\"Invalid request body\", maybeInput);\n          return new UploadThingError({\n            code: \"BAD_REQUEST\",\n            message: \"Invalid request body\",\n            cause: maybeInput,\n          });\n        }\n\n        logger.debug(\"Handling upload request with input:\", maybeInput);\n        const { files, input: userInput } = maybeInput;\n\n        // validate the input\n        let parsedInput: Json = {};\n        try {\n          logger.debug(\"Parsing input\");\n          const inputParser = uploadable._def.inputParser;\n          parsedInput = await getParseFn(inputParser)(userInput);\n          logger.debug(\"Input parsed successfully\", parsedInput);\n        } catch (error) {\n          logger.error(\"An error occured trying to parse input\", error);\n          return new UploadThingError({\n            code: \"BAD_REQUEST\",\n            message: \"Invalid input.\",\n            cause: error,\n          });\n        }\n\n        let metadata: Json = {};\n        try {\n          logger.debug(\"Running middleware\");\n          metadata = await uploadable._def.middleware({\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n            req: req as any,\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n            res: res as any,\n            event,\n            input: parsedInput,\n          });\n          logger.debug(\"Middleware finished successfully with:\", metadata);\n        } catch (error) {\n          logger.error(\"An error occured in your middleware function\", error);\n          return new UploadThingError({\n            code: \"INTERNAL_SERVER_ERROR\",\n            message: \"Failed to run middleware.\",\n            cause: error,\n          });\n        }\n\n        // Validate without Zod (for now)\n        if (\n          !Array.isArray(files) ||\n          !files.every(\n            (f) =>\n              isObject(f) &&\n              typeof f.name === \"string\" &&\n              typeof f.size === \"number\",\n          )\n        ) {\n          const msg = `Expected files to be of type '{name:string, size:number}[]', got '${JSON.stringify(\n            files,\n          )}'`;\n          logger.error(msg);\n          return new UploadThingError({\n            code: \"BAD_REQUEST\",\n            message: \"Files must be an array of objects with name and size\",\n            cause: msg,\n          });\n        }\n\n        // FILL THE ROUTE CONFIG so the server only has one happy path\n        let parsedConfig: ReturnType<typeof parseAndExpandInputConfig>;\n        try {\n          logger.debug(\"Parsing route config\", uploadable._def.routerConfig);\n          parsedConfig = parseAndExpandInputConfig(\n            uploadable._def.routerConfig,\n          );\n          logger.debug(\"Route config parsed successfully\", parsedConfig);\n        } catch (error) {\n          logger.error(\"Invalid route config\", error);\n          return new UploadThingError({\n            code: \"BAD_REQUEST\",\n            message: \"Invalid config.\",\n            cause: error,\n          });\n        }\n\n        try {\n          logger.debug(\"Checking file count limit\", files);\n          const { limitHit, count, limit, type } = fileCountLimitHit(\n            files,\n            parsedConfig,\n          );\n          if (limitHit) {\n            const msg = `You uploaded ${count} files of type '${type}', but the limit for that type is ${limit}`;\n            logger.error(msg);\n            return new UploadThingError({\n              code: \"BAD_REQUEST\",\n              message: \"File limit exceeded\",\n              cause: msg,\n            });\n          }\n          logger.debug(\"File count limit check passed\");\n        } catch (error) {\n          logger.error(\"Invalid route config\", error);\n          return new UploadThingError({\n            code: \"BAD_REQUEST\",\n            message: \"Invalid config.\",\n            cause: error,\n          });\n        }\n\n        const callbackUrl = resolveCallbackUrl({ config, req, url });\n        logger.debug(\n          \"Retrieving presigned URLs from UploadThing. Callback URL is:\",\n          callbackUrl.href,\n        );\n        const uploadthingApiResponse = await utFetch(\"/api/prepareUpload\", {\n          files: files,\n\n          routeConfig: parsedConfig,\n\n          metadata,\n          callbackUrl: callbackUrl.origin + callbackUrl.pathname,\n          callbackSlug: slug,\n        });\n\n        // This is when we send the response back to the user's form so they can submit the files\n        const parsedResponse = await safeParseJSON<UploadThingResponse>(\n          uploadthingApiResponse,\n        );\n\n        if (!uploadthingApiResponse.ok || parsedResponse instanceof Error) {\n          logger.error(\"Unable to get presigned URLs\", parsedResponse);\n          return new UploadThingError({\n            code: \"URL_GENERATION_FAILED\",\n            message: \"Unable to get presigned urls\",\n            cause: parsedResponse,\n          });\n        }\n\n        logger.debug(\"UploadThing responded with:\", parsedResponse);\n        logger.debug(\"Sending presigned URLs to client\");\n\n        // This is when we send the response back to the user's form so they can submit the files\n\n        if (process.env.NODE_ENV === \"development\") {\n          for (const file of parsedResponse) {\n            void conditionalDevServer({\n              fileKey: file.key,\n              apiKey: preferredOrEnvSecret,\n            });\n          }\n        }\n\n        return {\n          body: parsedResponse.map((x) => ({\n            ...x,\n            pollingUrl: generateUploadThingURL(`/api/serverCallback`),\n          })),\n          status: 200,\n        };\n      }\n      case \"multipart-complete\": {\n        const maybeReqBody = await safeParseJSON<\n          UTEvents[\"multipart-complete\"]\n        >(req);\n        if (maybeReqBody instanceof Error) {\n          logger.error(\"Invalid request body\", maybeReqBody);\n          return new UploadThingError({\n            code: \"BAD_REQUEST\",\n            message: \"Invalid request body\",\n            cause: maybeReqBody,\n          });\n        }\n\n        logger.debug(\n          \"Handling multipart-complete request with input:\",\n          maybeReqBody,\n        );\n        logger.debug(\"Notifying UploadThing that multipart upload is complete\");\n\n        const completeRes = await utFetch(\"/api/completeMultipart\", {\n          fileKey: maybeReqBody.fileKey,\n          uploadId: maybeReqBody.uploadId,\n          etags: maybeReqBody.etags,\n        });\n        if (!completeRes.ok) {\n          logger.error(\n            \"Failed to notify UploadThing that multipart upload is complete\",\n          );\n          return new UploadThingError({\n            code: \"UPLOAD_FAILED\",\n            message: \"Failed to complete multipart upload\",\n            cause: completeRes,\n          });\n        }\n\n        logger.debug(\"UploadThing responded with:\", completeRes.status);\n\n        return { status: 200 };\n      }\n      case \"failure\": {\n        const maybeReqBody = await safeParseJSON<UTEvents[\"failure\"]>(req);\n        if (maybeReqBody instanceof Error) {\n          logger.error(\"Invalid request body\", maybeReqBody);\n          return new UploadThingError({\n            code: \"BAD_REQUEST\",\n            message: \"Invalid request body\",\n            cause: maybeReqBody,\n          });\n        }\n        const { fileKey, uploadId } = maybeReqBody;\n        logger.debug(\"Handling failure request with input:\", maybeReqBody);\n        logger.debug(\"Notifying UploadThing that upload failed\");\n\n        // Tell uploadthing to mark the upload as failed\n        const uploadthingApiResponse = await utFetch(\"/api/failureCallback\", {\n          fileKey,\n          uploadId,\n        });\n\n        if (!uploadthingApiResponse.ok) {\n          const parsedResponse = await safeParseJSON<UploadThingResponse>(\n            uploadthingApiResponse,\n          );\n          logger.error(\"Failed to mark upload as failed\", parsedResponse);\n\n          return new UploadThingError({\n            code: \"INTERNAL_SERVER_ERROR\",\n            message: \"Unable to mark upload as failed\",\n            cause: parsedResponse,\n          });\n        }\n\n        logger.debug(\"UploadThing responded with:\", uploadthingApiResponse);\n        logger.debug(\"Running 'onUploadError' callback\");\n\n        try {\n          // Run the onUploadError callback\n          uploadable._def.onUploadError({\n            error: new UploadThingError({\n              code: \"UPLOAD_FAILED\",\n              message: `Upload failed for ${fileKey}`,\n            }),\n            fileKey,\n          });\n        } catch (error) {\n          logger.error(\n            \"Failed to run onUploadError callback. You probably shouldn't be throwing errors in your callback.\",\n            error,\n          );\n\n          return new UploadThingError({\n            code: \"INTERNAL_SERVER_ERROR\",\n            message: \"Failed to run onUploadError callback\",\n            cause: error,\n          });\n        }\n\n        return { status: 200 };\n      }\n      default: {\n        // This should never happen\n        return new UploadThingError({\n          code: \"BAD_REQUEST\",\n          message: `Invalid action type`,\n        });\n      }\n    }\n  };\n};\n\nfunction resolveCallbackUrl(opts: {\n  config: RouterWithConfig<FileRouter>[\"config\"];\n  req: RequestLike;\n  url: URL;\n}): URL {\n  let callbackUrl = opts.url;\n  if (opts.config?.callbackUrl) {\n    callbackUrl = getFullApiUrl(opts.config.callbackUrl);\n  } else if (process.env.UPLOADTHING_URL) {\n    callbackUrl = getFullApiUrl(process.env.UPLOADTHING_URL);\n  }\n\n  if (\n    process.env.NODE_ENV !== \"production\" ||\n    !callbackUrl.host.includes(\"localhost\")\n  ) {\n    return callbackUrl;\n  }\n\n  // Production builds have to have a public URL so UT can send webhook\n  // Parse the URL from the headers\n  let parsedFromHeaders = (\n    getHeader(opts.req, \"origin\") ??\n    getHeader(opts.req, \"referer\") ??\n    getHeader(opts.req, \"host\") ??\n    getHeader(opts.req, \"x-forwarded-host\")\n  )?.toString();\n\n  if (parsedFromHeaders && !parsedFromHeaders.includes(\"http\")) {\n    parsedFromHeaders =\n      (getHeader(opts.req, \"x-forwarded-proto\") ?? \"https\").toString() +\n      \"://\" +\n      parsedFromHeaders;\n  }\n\n  if (!parsedFromHeaders || parsedFromHeaders.includes(\"localhost\")) {\n    // Didn't find a valid URL in the headers, log a warning and use the original url anyway\n    logger.warn(\n      \"You are using a localhost callback url in production which is not supported.\",\n      \"Read more and learn how to fix it here: https://docs.uploadthing.com/faq#my-callback-runs-in-development-but-not-in-production\",\n    );\n    return callbackUrl;\n  }\n\n  return getFullApiUrl(parsedFromHeaders);\n}\n\nexport const buildPermissionsInfoHandler = <TRouter extends FileRouter>(\n  opts: RouterWithConfig<TRouter>,\n) => {\n  return () => {\n    const r = opts.router;\n\n    const permissions = Object.keys(r).map((k) => {\n      const route = r[k];\n      const config = parseAndExpandInputConfig(route._def.routerConfig);\n      return {\n        slug: k as keyof TRouter,\n        config,\n      };\n    });\n\n    return permissions;\n  };\n};\n","import {\n  generateUploadThingURL,\n  pollForFileData,\n  UploadThingError,\n} from \"@uploadthing/shared\";\nimport type { FileData } from \"@uploadthing/shared\";\n\nimport { UPLOADTHING_VERSION } from \"../constants\";\nimport { logger } from \"./logger\";\n\nconst isValidResponse = (response: Response) => {\n  if (!response.ok) return false;\n  if (response.status >= 400) return false;\n  if (!response.headers.has(\"x-uploadthing-version\")) return false;\n\n  return true;\n};\n\nexport const conditionalDevServer = async (opts: {\n  fileKey: string;\n  apiKey: string;\n}) => {\n  if (process.env.NODE_ENV !== \"development\") return;\n\n  const fileData = await pollForFileData(\n    {\n      url: generateUploadThingURL(`/api/pollUpload/${opts.fileKey}`),\n      apiKey: opts.apiKey,\n      sdkVersion: UPLOADTHING_VERSION,\n    },\n    async (json: { fileData: FileData }) => {\n      const file = json.fileData;\n\n      let callbackUrl = file.callbackUrl + `?slug=${file.callbackSlug}`;\n      if (!callbackUrl.startsWith(\"http\"))\n        callbackUrl = \"http://\" + callbackUrl;\n\n      logger.info(\"SIMULATING FILE UPLOAD WEBHOOK CALLBACK\", callbackUrl);\n\n      const response = await fetch(callbackUrl, {\n        method: \"POST\",\n        body: JSON.stringify({\n          status: \"uploaded\",\n          metadata: JSON.parse(file.metadata ?? \"{}\") as FileData[\"metadata\"],\n          file: {\n            url: `https://utfs.io/f/${encodeURIComponent(opts.fileKey)}`,\n            key: opts.fileKey,\n            name: file.fileName,\n            size: file.fileSize,\n          },\n        }),\n        headers: {\n          \"uploadthing-hook\": \"callback\",\n        },\n      });\n      if (isValidResponse(response)) {\n        logger.success(\n          \"Successfully simulated callback for file\",\n          opts.fileKey,\n        );\n      } else {\n        logger.error(\n          \"Failed to simulate callback for file. Is your webhook configured correctly?\",\n          opts.fileKey,\n        );\n      }\n      return file;\n    },\n  );\n\n  if (fileData !== undefined) return fileData;\n\n  logger.error(`Failed to simulate callback for file ${opts.fileKey}`);\n  throw new UploadThingError({\n    code: \"UPLOAD_FAILED\",\n    message: \"File took too long to upload\",\n  });\n};\n","import { inspect } from \"node:util\";\nimport type { LogObject, LogType } from \"consola/core\";\nimport { createConsola, LogLevels } from \"consola/core\";\n\nimport { isObject } from \"@uploadthing/shared\";\n\nexport type LogLevel = \"error\" | \"warn\" | \"info\" | \"debug\" | \"trace\";\n\nconst colorize = (str: string, level: LogType) => {\n  // TODO: Maybe check is shell supports colors\n\n  switch (level) {\n    case \"error\":\n    case \"fatal\":\n      return `\\x1b[41m\\x1b[30m${str}\\x1b[0m`;\n    case \"warn\":\n      return `\\x1b[43m\\x1b[30m${str}\\x1b[0m`;\n    case \"info\":\n    case \"log\":\n      return `\\x1b[44m\\x1b[30m${str}\\x1b[0m`;\n    case \"debug\":\n      return `\\x1b[47m\\x1b[30m${str}\\x1b[0m`;\n    case \"trace\":\n      return `\\x1b[47m\\x1b[30m${str}\\x1b[0m`;\n    case \"success\":\n      return `\\x1b[42m\\x1b[30m${str}\\x1b[0m`;\n    default:\n      return str;\n  }\n};\n\nconst icons: { [t in LogType]?: string } = {\n  fatal: \"⨯\",\n  error: \"⨯\",\n  warn: \"⚠️\",\n  info: \"ℹ\",\n  log: \"ℹ\",\n  debug: \"⚙\",\n  trace: \"→\",\n  success: \"✓\",\n};\n\nfunction formatStack(stack: string) {\n  return (\n    \"  \" +\n    stack\n      .split(\"\\n\")\n      .splice(1)\n      .map((l) =>\n        l\n          .trim()\n          .replace(\"file://\", \"\")\n          .replace(process.cwd() + \"/\", \"\"),\n      )\n      .join(\"\\n  \")\n  );\n}\n\nfunction formatArgs(args: any[]) {\n  const fmtArgs = args.map((arg) => {\n    if (isObject(arg) && typeof arg.stack === \"string\") {\n      return (arg.message as string) + \"\\n\" + formatStack(arg.stack);\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n    return arg;\n  });\n\n  return fmtArgs.map((arg) => {\n    if (typeof arg === \"string\") {\n      return arg;\n    }\n    try {\n      // prefer inspect over JSON.stringify because it handles circular references, prints classes etc\n      return inspect(arg, { depth: 4 });\n    } catch {\n      // fallback to JSON.stringify if inspect fails e.g. if runtime doesn't have util module\n      return JSON.stringify(arg, null, 4);\n    }\n  });\n}\n\nexport const logger = createConsola({\n  reporters: [\n    {\n      log: (logObj: LogObject) => {\n        const { type, tag, date, args } = logObj;\n        const icon = icons[type as LogLevel];\n\n        const logPrefix = colorize(\n          ` ${icon} ${tag} ${date.toLocaleTimeString()} `,\n          type as LogLevel,\n        );\n        const lines = formatArgs(args)\n          .join(\" \") // concat all arguments to one space-separated string (like console does)\n          .split(\"\\n\") // split all the newlines (e.g. from logged JSON.stringified objects)\n          .map((l) => logPrefix + \" \" + l) // prepend the log prefix to each line\n          .join(\"\\n\"); // join all the lines back together\n\n        // eslint-disable-next-line no-console\n        console.log(lines);\n      },\n    },\n  ],\n  defaults: {\n    tag: \"UPLOADTHING\",\n  },\n});\n\nexport const initLogger = (level: LogLevel | undefined) => {\n  // logger.wrapConsole();\n  logger.level = LogLevels[level ?? \"info\"];\n};\n","/*\n * Returns a full URL to the dev's uploadthing endpoint\n * Can take either an origin, or a pathname, or a full URL\n * and will return the \"closest\" url matching the default\n * `<VERCEL_URL || localhost>/api/uploadthing`\n */\nexport function getFullApiUrl(maybeUrl?: string): URL {\n  const base = (() => {\n    if (typeof window !== \"undefined\") {\n      return window.location.origin;\n    }\n\n    // eslint-disable-next-line @typescript-eslint/prefer-optional-chain\n    if (typeof process !== \"undefined\" && process?.env?.VERCEL_URL) {\n      return `https://${process.env.VERCEL_URL}`;\n    }\n\n    // @ts-expect-error - import meta is not defined in node\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    if (import.meta.env?.VERCEL_URL) {\n      // @ts-expect-error - import meta is not defined in node\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      return `https://${import.meta.env.VERCEL_URL}`;\n    }\n\n    return \"http://localhost:3000\";\n  })();\n\n  try {\n    const url = new URL(maybeUrl ?? \"/api/uploadthing\", base);\n    if (url.pathname === \"/\") {\n      url.pathname = \"/api/uploadthing\";\n    }\n    return url;\n  } catch (err) {\n    throw new Error(\n      `Failed to parse '${maybeUrl}' as a URL. Make sure it's a valid URL or path`,\n    );\n  }\n}\n","import type { Json } from \"@uploadthing/shared\";\n\nimport type { MaybePromise } from \"./types\";\n\n// Don't want to use Zod cause it's an optional dependency\nexport type ParseFn<TType> = (input: unknown) => MaybePromise<TType>;\nexport type ParserZodEsque<TInput, TParsedInput extends Json> = {\n  _input: TInput;\n  _output: TParsedInput; // if using .transform etc\n  parse: ParseFn<TParsedInput>;\n};\n\n// In case we add support for more parsers later\nexport type JsonParser = ParserZodEsque<Json, Json>;\n\nexport function getParseFn<TParser extends JsonParser>(\n  parser: TParser,\n): ParseFn<TParser[\"_output\"]> {\n  if (typeof parser.parse === \"function\") {\n    return parser.parse;\n  }\n\n  throw new Error(\"Invalid parser\");\n}\n","/* eslint-disable @typescript-eslint/ban-types */\n\nimport type {\n  FileRouterInputConfig,\n  Json,\n  UploadedFile,\n  UploadThingError,\n} from \"@uploadthing/shared\";\n\nimport type { JsonParser } from \"./parser\";\n\n//\n// Utils\nexport const unsetMarker = \"unsetMarker\" as \"unsetMarker\" & {\n  __brand: \"unsetMarker\";\n};\nexport type UnsetMarker = typeof unsetMarker;\n\nexport type Simplify<TType> = { [TKey in keyof TType]: TType[TKey] } & {};\n\nexport type MaybePromise<TType> = TType | Promise<TType>;\n\n/**\n * Omits the key without removing a potential union\n * @internal\n */\nexport type DistributiveOmit<TObj, TKey extends keyof any> = TObj extends any\n  ? Omit<TObj, TKey>\n  : never;\n\n//\n// Package\ntype ResolverOptions<TParams extends AnyParams> = {\n  metadata: Simplify<\n    TParams[\"_metadata\"] extends UnsetMarker ? undefined : TParams[\"_metadata\"]\n  >;\n\n  file: UploadedFile;\n};\n\nexport type AnyRuntime = \"app\" | \"pages\" | \"web\" | \"express\" | \"fastify\" | \"h3\";\n\nexport type MiddlewareFnArgs<TRequest, TResponse, TEvent> = {\n  req: TRequest;\n  res: TResponse;\n  event: TEvent;\n};\nexport interface AnyParams {\n  _input: any;\n  _metadata: any; // imaginary field used to bind metadata return type to an Upload resolver\n  _middlewareArgs: MiddlewareFnArgs<any, any, any>;\n  _errorShape: any;\n  _errorFn: any; // used for onUploadError\n  _output: any;\n}\n\ntype MiddlewareFn<\n  TInput extends Json | UnsetMarker,\n  TOutput extends Record<string, unknown>,\n  TArgs extends MiddlewareFnArgs<any, any, any>,\n> = (\n  opts: TArgs & (TInput extends UnsetMarker ? {} : { input: TInput }),\n) => MaybePromise<TOutput>;\n\ntype ResolverFn<TOutput extends Json | void, TParams extends AnyParams> = (\n  opts: ResolverOptions<TParams>,\n) => MaybePromise<TOutput>;\n\ntype UploadErrorFn = (input: {\n  error: UploadThingError;\n  fileKey: string;\n}) => void;\n\nexport type ErrorMessage<TError extends string> = TError;\n\nexport interface UploadBuilder<TParams extends AnyParams> {\n  input: <TParser extends JsonParser>(\n    parser: TParams[\"_input\"] extends UnsetMarker\n      ? TParser\n      : ErrorMessage<\"input is already set\">,\n  ) => UploadBuilder<{\n    _input: TParser[\"_output\"];\n    _metadata: TParams[\"_metadata\"];\n    _middlewareArgs: TParams[\"_middlewareArgs\"];\n    _errorShape: TParams[\"_errorShape\"];\n    _errorFn: TParams[\"_errorFn\"];\n    _output: UnsetMarker;\n  }>;\n  middleware: <TOutput extends Record<string, unknown>>(\n    fn: TParams[\"_metadata\"] extends UnsetMarker\n      ? MiddlewareFn<TParams[\"_input\"], TOutput, TParams[\"_middlewareArgs\"]>\n      : ErrorMessage<\"middleware is already set\">,\n  ) => UploadBuilder<{\n    _input: TParams[\"_input\"];\n    _metadata: TOutput;\n    _middlewareArgs: TParams[\"_middlewareArgs\"];\n    _errorShape: TParams[\"_errorShape\"];\n    _errorFn: TParams[\"_errorFn\"];\n    _output: UnsetMarker;\n  }>;\n  onUploadComplete: <TOutput extends Json | void>(\n    fn: ResolverFn<TOutput, TParams>,\n  ) => Uploader<{\n    _input: TParams[\"_input\"];\n    _metadata: TParams[\"_metadata\"];\n    _middlewareArgs: TParams[\"_middlewareArgs\"];\n    _errorShape: TParams[\"_errorShape\"];\n    _errorFn: TParams[\"_errorFn\"];\n    _output: TOutput;\n  }>;\n  onUploadError: (\n    fn: TParams[\"_errorFn\"] extends UnsetMarker\n      ? UploadErrorFn\n      : ErrorMessage<\"onUploadError is already set\">,\n  ) => UploadBuilder<{\n    _input: TParams[\"_input\"];\n    _metadata: TParams[\"_metadata\"];\n    _middlewareArgs: TParams[\"_middlewareArgs\"];\n    _errorShape: TParams[\"_errorShape\"];\n    _errorFn: UploadErrorFn;\n    _output: UnsetMarker;\n  }>;\n}\n\nexport type UploadBuilderDef<TParams extends AnyParams> = {\n  routerConfig: FileRouterInputConfig;\n  inputParser: JsonParser;\n  middleware: MiddlewareFn<TParams[\"_input\"], {}, TParams[\"_middlewareArgs\"]>;\n  errorFormatter: (err: UploadThingError) => TParams[\"_errorShape\"];\n  onUploadError: UploadErrorFn;\n};\n\nexport interface Uploader<TParams extends AnyParams> {\n  _def: TParams & UploadBuilderDef<TParams>;\n  resolver: ResolverFn<TParams[\"_output\"], TParams>;\n}\n\nexport type FileRouter<TParams extends AnyParams = AnyParams> = Record<\n  string,\n  Uploader<TParams>\n>;\n\nexport type inferEndpointInput<TUploader extends Uploader<any>> =\n  TUploader[\"_def\"][\"_input\"] extends UnsetMarker\n    ? undefined\n    : TUploader[\"_def\"][\"_input\"];\n\nexport type inferEndpointOutput<TUploader extends Uploader<any>> =\n  TUploader[\"_def\"][\"_output\"] extends UnsetMarker | void | undefined\n    ? null\n    : TUploader[\"_def\"][\"_output\"];\n\nexport type inferErrorShape<TRouter extends FileRouter> =\n  TRouter[keyof TRouter][\"_def\"][\"_errorShape\"];\n\nexport const VALID_ACTION_TYPES = [\n  \"upload\",\n  \"failure\",\n  \"multipart-complete\",\n] as const;\nexport type ActionType = (typeof VALID_ACTION_TYPES)[number];\n\nexport type UTEvents = {\n  upload: {\n    files: { name: string; size: number }[];\n    input: Json;\n  };\n  failure: {\n    fileKey: string;\n    uploadId: string;\n    s3Error?: string;\n    fileName: string;\n  };\n  \"multipart-complete\": {\n    fileKey: string;\n    uploadId: string;\n    etags: {\n      tag: string;\n      partNumber: number;\n    }[];\n  };\n};\n","import { logger } from \"./logger\";\n\nexport function incompatibleNodeGuard() {\n  if (typeof process === \"undefined\") return;\n\n  let major: number | undefined;\n  let minor: number | undefined;\n\n  const maybeNodeVersion = process.versions?.node?.split(\".\");\n  if (maybeNodeVersion) {\n    [major, minor] = maybeNodeVersion.map((v) => parseInt(v, 10));\n  }\n\n  const maybeNodePath = process.env?.NODE;\n  if (!major && maybeNodePath) {\n    const nodeVersion = /v(\\d+)\\.(\\d+)\\.(\\d+)/.exec(maybeNodePath)?.[0];\n    if (nodeVersion) {\n      [major, minor] = nodeVersion\n        .substring(1)\n        .split(\".\")\n        .map((v) => parseInt(v, 10));\n    }\n  }\n\n  if (!major || !minor) return;\n\n  // Require ^18.13.0\n  if (major > 18) return;\n  if (major === 18 && minor >= 13) return;\n\n  logger.fatal(\n    `YOU ARE USING A LEGACY (${major}.${minor}) NODE VERSION WHICH ISN'T OFFICIALLY SUPPORTED. PLEASE UPGRADE TO NODE ^18.13.`,\n  );\n  process.exit(1); // Kill the process if it isn't going to work correctly anyway\n}\n","import type { IncomingMessage } from \"node:http\";\n\nimport { UploadThingError } from \"@uploadthing/shared\";\n\nexport type BodyResult =\n  | {\n      ok: true;\n      data: unknown;\n    }\n  | { ok: false; error: Error };\nexport type NodeHTTPRequest = IncomingMessage & {\n  body?: unknown;\n};\nexport async function getPostBody(opts: {\n  req: NodeHTTPRequest;\n  maxBodySize?: number;\n}): Promise<BodyResult> {\n  const { req, maxBodySize = Infinity } = opts;\n  return new Promise((resolve) => {\n    if (\"body\" in req) {\n      const isJsonType = req.headers[\"content-type\"] === \"application/json\";\n\n      if (!isJsonType) {\n        resolve({\n          ok: false,\n          error: new UploadThingError({\n            code: \"BAD_REQUEST\",\n            message: \"INVALID_CONTENT_TYPE\",\n          }),\n        });\n        return;\n      }\n\n      if (typeof req.body !== \"object\") {\n        resolve({\n          ok: false,\n          error: new UploadThingError({\n            code: \"BAD_REQUEST\",\n            message: \"INVALID_BODY\",\n          }),\n        });\n        return;\n      }\n\n      resolve({\n        ok: true,\n        data: req.body,\n      });\n      return;\n    }\n    let body = \"\";\n    let hasBody = false;\n    req.on(\"data\", function (data) {\n      body += data;\n      hasBody = true;\n      if (body.length > maxBodySize) {\n        resolve({\n          ok: false,\n          error: new UploadThingError({\n            code: \"BAD_REQUEST\",\n            message: \"PAYLOAD_TOO_LARGE\",\n          }),\n        });\n        req.socket.destroy();\n      }\n    });\n    req.on(\"end\", () => {\n      let parsedBody: unknown;\n      try {\n        parsedBody = JSON.parse(body);\n      } catch (e) {\n        resolve({\n          ok: false,\n          error: new UploadThingError({\n            code: \"BAD_REQUEST\",\n            message: \"INVALID_JSON\",\n          }),\n        });\n        return;\n      }\n\n      resolve({\n        ok: true,\n        data: hasBody ? parsedBody : undefined,\n      });\n    });\n  });\n}\n","import type {\n  FileRouterInputConfig,\n  Json,\n  UploadThingError,\n} from \"@uploadthing/shared\";\n\nimport { defaultErrorFormatter } from \"./error-formatter\";\nimport type {\n  AnyParams,\n  MiddlewareFnArgs,\n  UnsetMarker,\n  UploadBuilder,\n  UploadBuilderDef,\n  Uploader,\n} from \"./types\";\n\nfunction internalCreateBuilder<\n  TMiddlewareArgs extends MiddlewareFnArgs<any, any, any>,\n  TErrorShape extends Json = { message: string },\n>(\n  initDef: Partial<UploadBuilderDef<any>> = {},\n): UploadBuilder<{\n  _input: UnsetMarker;\n  _metadata: UnsetMarker;\n  _middlewareArgs: TMiddlewareArgs;\n  _errorShape: TErrorShape;\n  _errorFn: UnsetMarker;\n  _output: UnsetMarker;\n}> {\n  const _def: UploadBuilderDef<AnyParams> = {\n    // Default router config\n    routerConfig: {\n      image: {\n        maxFileSize: \"4MB\",\n      },\n    },\n\n    inputParser: { parse: () => ({}), _input: {}, _output: {} },\n\n    middleware: () => ({}),\n    onUploadError: () => ({}),\n\n    errorFormatter: initDef.errorFormatter ?? defaultErrorFormatter,\n\n    // Overload with properties passed in\n    ...initDef,\n  };\n\n  return {\n    input(userParser) {\n      return internalCreateBuilder({\n        ..._def,\n        inputParser: userParser,\n      }) as UploadBuilder<any>;\n    },\n    middleware(userMiddleware) {\n      return internalCreateBuilder({\n        ..._def,\n        middleware: userMiddleware,\n      }) as UploadBuilder<any>;\n    },\n    onUploadComplete(userUploadComplete) {\n      return {\n        _def,\n        resolver: userUploadComplete,\n      } as Uploader<any>;\n    },\n    onUploadError(userOnUploadError) {\n      return internalCreateBuilder({\n        ..._def,\n        onUploadError: userOnUploadError,\n      }) as UploadBuilder<any>;\n    },\n  };\n}\n\ntype InOut<\n  TMiddlewareArgs extends MiddlewareFnArgs<any, any, any>,\n  TErrorShape extends Json = { message: string },\n> = (input: FileRouterInputConfig) => UploadBuilder<{\n  _input: UnsetMarker;\n  _metadata: UnsetMarker;\n  _middlewareArgs: TMiddlewareArgs;\n  _errorShape: TErrorShape;\n  _errorFn: UnsetMarker;\n  _output: UnsetMarker;\n}>;\n\nexport type CreateBuilderOptions<TErrorShape extends Json> = {\n  errorFormatter: (err: UploadThingError) => TErrorShape;\n};\n\nexport function createBuilder<\n  TMiddlewareArgs extends MiddlewareFnArgs<any, any, any>,\n  TErrorShape extends Json = { message: string },\n>(\n  opts?: CreateBuilderOptions<TErrorShape>,\n): InOut<TMiddlewareArgs, TErrorShape> {\n  return (input: FileRouterInputConfig) => {\n    return internalCreateBuilder<TMiddlewareArgs, TErrorShape>({\n      routerConfig: input,\n      ...opts,\n    });\n  };\n}\n"],"mappings":"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","names":["import_shared","import_shared","import_shared","res","parseAndExpandInputConfig","import_shared","ExpressRouter"]}