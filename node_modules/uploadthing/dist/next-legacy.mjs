import {
  UPLOADTHING_VERSION,
  buildPermissionsInfoHandler,
  buildRequestHandler,
  createBuilder,
  formatError,
  incompatibleNodeGuard,
  initLogger
} from "./chunk-K4BQP7SE.mjs";
import "./chunk-4PDGVH57.mjs";

// src/next-legacy.ts
import { getStatusCodeFromError, UploadThingError } from "@uploadthing/shared";
var createUploadthing = (opts) => createBuilder(opts);
var createNextPageApiHandler = (opts) => {
  var _a;
  initLogger((_a = opts.config) == null ? void 0 : _a.logLevel);
  incompatibleNodeGuard();
  const requestHandler = buildRequestHandler(opts);
  const getBuildPerms = buildPermissionsInfoHandler(opts);
  return async (req, res) => {
    if (req.method === "GET") {
      const perms = getBuildPerms();
      res.status(200).json(perms);
      return;
    }
    const proto = req.headers["x-forwarded-proto"] ?? "http";
    const url = new URL(req.url ?? "/", `${proto}://${req.headers.host}`);
    const response = await requestHandler({
      req: Object.assign(req, {
        json: () => Promise.resolve(
          typeof req.body === "string" ? JSON.parse(req.body) : req.body
        )
      }),
      url,
      res
    });
    res.setHeader("x-uploadthing-version", UPLOADTHING_VERSION);
    if (response instanceof UploadThingError) {
      res.status(getStatusCodeFromError(response));
      res.setHeader("x-uploadthing-version", UPLOADTHING_VERSION);
      return res.json(formatError(response, opts.router));
    }
    if (response.status !== 200) {
      res.status(500);
      return res.send("An unknown error occured");
    }
    res.status(response.status);
    return res.json(response.body);
  };
};
export {
  createNextPageApiHandler,
  createUploadthing
};
//# sourceMappingURL=next-legacy.mjs.map